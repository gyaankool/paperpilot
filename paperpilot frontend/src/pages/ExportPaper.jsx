// "use client";

// import React, { useState, useEffect } from "react";
// import { FileText, Download, Loader2, CheckCircle, AlertCircle, Shield, TrendingUp } from "lucide-react";
// import Header from "../components/Header";
// import QualityReport from "../components/QualityReport";
// import tick from "../../public/assets/tick.png";
// import apiService from "../services/api.js";
// import { usePaper } from "../contexts/PaperContext";

// const ExportPaper = () => {
//   const { processedPapers, currentPaper } = usePaper();
//   const [downloading, setDownloading] = useState({});
//   const [message, setMessage] = useState("");
//   const [messageType, setMessageType] = useState("");
//   const [templateInfo, setTemplateInfo] = useState(null);
//   const [showQualityReport, setShowQualityReport] = useState(false);

//   useEffect(() => {
//     // Load template information
//     const loadTemplateInfo = async () => {
//       try {
//         const response = await apiService.getTemplateInfo();
//         if (response.success) {
//           setTemplateInfo(response.template_info);
//         }
//       } catch (error) {
//         console.error('Failed to load template info:', error);
//       }
//     };

//     loadTemplateInfo();
//   }, []);

//   const formats = [
//     {
//       title: "LaTeX",
//       subtitle: "Academic standard format",
//       features: [
//         "Mathematical formulas",
//         "Bibliography support",
//         "Journal templates",
//       ],
//       button: "Download LaTeX",
//       color: "bg-[#647ffb]",
//       extension: ".tex"
//     },
//     {
//       title: "Microsoft Word",
//       subtitle: "Editable document format",
//       features: ["Track changes", "Comments", "Easy editing"],
//       button: "Download Microsoft Word",
//       color: "bg-[#647ffb]",
//        extension: ".docx"
//     },
//     {
//       title: "PDF",
//       subtitle: "Publication-ready format",
//       features: ["Print-ready", "Preserved formatting", "Widely compatible"],
//       button: "Download PDF",
//       color: "bg-[#647ffb]",
//        extension: ".pdf"
//     },
//   ];

//   const handleDownload = async (format) => {
//     setDownloading(prev => ({ ...prev, [format]: true }));
//     setMessage("");
    
//     try {
//       // Use processed paper content if available, otherwise show message
//       let contentToExport = "";
      
//       if (processedPapers && processedPapers.length > 0) {
//         // Combine all processed papers into one research paper
//         contentToExport = processedPapers.map(paper => 
//           `# ${paper.filename}\n\n${paper.formatted_content}`
//         ).join('\n\n---\n\n');
//       } else {
//         // Fallback content if no processed papers
//         contentToExport = `
// # Research Paper Generated by PaperPilot

// ## Abstract
// This paper was generated using PaperPilot's AI-powered research paper generation system. The content has been processed and formatted according to academic standards.

// ## Note
// No processed papers were found. Please upload and process your research papers first to generate content from your actual research.

// ## Generated Content
// This is a placeholder paper generated by PaperPilot. To get your actual research content, please:
// 1. Upload your base and reference papers
// 2. Process them through the system
// 3. Return to this page to download your formatted research paper

// ## System Information
// - Generated by: PaperPilot AI
// - Date: ${new Date().toLocaleDateString()}
// - Format: ${format}
//         `;
//       }

//       const formatMap = {
//         'LaTeX': 'tex',
//         'Microsoft Word': 'docx', 
//         'PDF': 'pdf'
//       };

//       const fileFormat = formatMap[format];
//       const filename = processedPapers.length > 0 
//         ? `research_paper_${new Date().toISOString().split('T')[0]}`
//         : `sample_paper_${new Date().toISOString().split('T')[0]}`;

//       await apiService.exportPaper(contentToExport, fileFormat, filename);
      
//       setMessage(`${format} file downloaded successfully!`);
//       setMessageType("success");
//     } catch (error) {
//       console.error('Download error:', error);
//       setMessage(`Failed to download ${format}: ${error.message}`);
//       setMessageType("error");
//     } finally {
//       setDownloading(prev => ({ ...prev, [format]: false }));
//     }
//   };

//   return (
//     <div className="min-h-screen flex flex-col">
//       {/* Header */}
//       <Header/>

//       {/* Main */}
//       <main className="flex-1 flex justify-center p-4">
//         <div className="w-full max-w-6xl border border-[#805454] rounded-md p-8 bg-white shadow">
//           {/* Title */}
//           <h2 className="text-xl font-bold mb-2">Export Your Paper</h2>
//           <p className="text-gray-600 text-sm mb-6">
//             Choose your preferred format and download your publication-ready
//             research paper
//           </p>

//           {/* Template Information */}
//           {templateInfo && (
//             <div className="mb-6 p-4 rounded-md bg-blue-100 text-blue-800 border border-blue-200">
//               <div className="flex items-center gap-2 mb-2">
//                 <FileText className="w-5 h-5" />
//                 <span className="font-medium">Template: {templateInfo.template_name}</span>
//               </div>
//               <p className="text-sm">
//                 {templateInfo.available 
//                   ? `Using ${templateInfo.template_name} for consistent formatting across all papers.`
//                   : 'Template not available. Using default formatting.'
//                 }
//               </p>
//             </div>
//           )}

//           {/* Status Display */}
//           <div className={`mb-6 p-4 rounded-md ${
//             processedPapers && processedPapers.length > 0
//               ? 'bg-green-100 text-green-800 border border-green-200'
//               : 'bg-yellow-100 text-yellow-800 border border-yellow-200'
//           }`}>
//             {processedPapers && processedPapers.length > 0 ? (
//               <div>
//                 <div className="flex items-center justify-between mb-2">
//                   <div className="flex items-center gap-2">
//                     <CheckCircle className="w-5 h-5" />
//                     <span className="font-medium">
//                       {processedPapers.length} processed paper{processedPapers.length > 1 ? 's' : ''} ready for export
//                     </span>
//                   </div>
//                   <button
//                     onClick={() => setShowQualityReport(true)}
//                     className="px-3 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
//                   >
//                     View Quality Report
//                   </button>
//                 </div>
                
//                 {/* Quality Indicators */}
//                 {processedPapers[0]?.quality_report && (
//                   <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mt-3">
//                     <div className="flex items-center gap-2 text-sm">
//                       <TrendingUp className="w-4 h-4" />
//                       <span>Quality: </span>
//                       <span className={`font-semibold ${
//                         processedPapers[0].quality_report.overall_score >= 80 
//                           ? 'text-green-600' 
//                           : processedPapers[0].quality_report.overall_score >= 60
//                           ? 'text-yellow-600'
//                           : 'text-red-600'
//                       }`}>
//                         {processedPapers[0].quality_report.overall_score || 0}/100
//                       </span>
//                     </div>
//                     <div className="flex items-center gap-2 text-sm">
//                       <Shield className="w-4 h-4" />
//                       <span>Originality: </span>
//                       <span className={`font-semibold ${
//                         processedPapers[0].plagiarism_report?.originality_score >= 85 
//                           ? 'text-green-600' 
//                           : processedPapers[0].plagiarism_report?.originality_score >= 70
//                           ? 'text-yellow-600'
//                           : 'text-red-600'
//                       }`}>
//                         {processedPapers[0].plagiarism_report?.originality_score || 0}%
//                       </span>
//                     </div>
//                     <div className="flex items-center gap-2 text-sm">
//                       <FileText className="w-4 h-4" />
//                       <span>Template: </span>
//                       <span className={`font-semibold ${
//                         processedPapers[0].template_compliance?.score >= 80 
//                           ? 'text-green-600' 
//                           : processedPapers[0].template_compliance?.score >= 60
//                           ? 'text-yellow-600'
//                           : 'text-red-600'
//                       }`}>
//                         {processedPapers[0].template_compliance?.score || 0}%
//                       </span>
//                     </div>
//                   </div>
//                 )}
                
//                 {processedPapers[0]?.template_compliance && (
//                   <div className="mt-2 text-sm">
//                     {processedPapers[0].template_compliance.issues.length > 0 && (
//                       <div className="text-xs">
//                         Issues: {processedPapers[0].template_compliance.issues.join(', ')}
//                       </div>
//                     )}
//                   </div>
//                 )}
//               </div>
//             ) : (
//               <div className="flex items-center gap-2">
//                 <AlertCircle className="w-5 h-5" />
//                 <span className="font-medium">
//                   No processed papers found. Please upload and process your research papers first.
//                 </span>
//               </div>
//             )}
//           </div>

//           {/* Message Display */}
//           {message && (
//             <div className={`mb-6 p-4 rounded-md ${
//               messageType === 'success' 
//                 ? 'bg-green-100 text-green-800 border border-green-200' 
//                 : 'bg-red-100 text-red-800 border border-red-200'
//             }`}>
//               {message}
//             </div>
//           )}

//           {/* Format Selector */}
//           <div className="flex items-center gap-3 mb-8">
//             <label className="text-sm font-medium text-gray-700">
//               Select Format:
//             </label>
//             <select className="border border-gray-300 rounded-md px-3 py-1 text-sm">
//               <option>All Format</option>
//               <option>LaTeX</option>
//               <option>Microsoft Word</option>
//               <option>PDF</option>
//             </select>
//           </div>

//           {/* Cards */}
//           <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
//             {formats.map((format, idx) => (
//               <div
//                 key={idx}
//                 className="bg-white rounded-lg border border-[#805454] shadow-[0_8px_24px_rgba(128,84,84,0.2),0_4px_8px_rgba(128,84,84,0.15)] p-6 flex flex-col gap-4 hover:shadow-lg transition"
//               >
//                 <div className="flex justify-center text-gray-600">
//                   <FileText className="w-10 h-10 bg-[#f9f5f2] border border-[#be9999] p-2" />
//                 </div>
//                 <h3 className="text-center font-bold text-2xl text-[#805454] ">
//                   {format.title}
//                 </h3>
//                 <p className="text-xs text-gray-500  text-center">
//                   {format.subtitle}
//                 </p>
//                 <p className="text-xs bg-gray-300 py-0.5 px-2 rounded-md text-center w-fit mx-auto">
//                   {format.extension}
//                 </p>

//                 <ul className="text-sm text-gray-700 flex flex-col gap-1 mt-2">
//                   {format.features.map((feat, i) => (
//                     <li key={i} className="flex items-center gap-2 text-lg">
//                       <span className="text-green-500">
//                         <img src={tick} alt="" />
//                       </span>
//                       {feat}
//                     </li>
//                   ))}
//                 </ul>
//                 <button
//                   onClick={() => handleDownload(format.title)}
//                   disabled={downloading[format.title]}
//                   className={`flex items-center justify-center gap-2 text-white ${format.color} rounded-md px-4 py-2 mt-auto disabled:opacity-50 disabled:cursor-not-allowed`}
//                 >
//                   {downloading[format.title] ? (
//                     <Loader2 className="w-4 h-4 animate-spin" />
//                   ) : (
//                     <Download className="w-4 h-4" />
//                   )}
//                   {downloading[format.title] ? 'Downloading...' : format.button}
//                 </button>
//               </div>
//             ))}
//           </div>

//           {/* Submission Metadata */}
//           <div className="flex justify-center mt-8">
//             <button className="px-6 py-3 bg-[#647ffb] text-white font-semibold rounded-md shadow hover:bg-[#5068d6] transition text-xl">
//               Submission Metadata
//             </button>
//           </div>
//         </div>
//       </main>

//       {/* Quality Report Modal */}
//       {showQualityReport && processedPapers && processedPapers.length > 0 && (
//         <QualityReport
//           paperData={processedPapers[0]}
//           onClose={() => setShowQualityReport(false)}
//         />
//       )}
//     </div>
//   );
// };

// export default ExportPaper;










"use client";

import React, { useState, useEffect } from "react";
import { FileText, Download, Loader2, CheckCircle, AlertCircle, Shield, TrendingUp } from "lucide-react";
import Header from "../components/Header";
import QualityReport from "../components/QualityReport";
import apiService from "../services/api.js";
import { usePaper } from "../contexts/PaperContext";

const ExportPaper = () => {
  const { processedPapers, currentPaper } = usePaper();
  const [downloading, setDownloading] = useState({});
  const [message, setMessage] = useState("");
  const [messageType, setMessageType] = useState("");
  const [templateInfo, setTemplateInfo] = useState(null);
  const [showQualityReport, setShowQualityReport] = useState(false);

  useEffect(() => {
    const loadTemplateInfo = async () => {
      try {
        const response = await apiService.getTemplateInfo();
        if (response.success) {
          setTemplateInfo(response.template_info);
        }
      } catch (error) {
        console.error("Failed to load template info:", error);
      }
    };
    loadTemplateInfo();
  }, []);

  const formats = [
    {
      title: "LaTeX",
      subtitle: "Academic standard format",
      features: ["Mathematical formulas", "Bibliography support", "Journal templates"],
      button: "Download LaTeX",
      extension: ".tex",
    },
    {
      title: "Microsoft Word",
      subtitle: "Editable document format",
      features: ["Track changes", "Comments", "Easy editing"],
      button: "Download Microsoft Word",
      extension: ".docx",
    },
    {
      title: "PDF",
      subtitle: "Publication-ready format",
      features: ["Print-ready", "Preserved formatting", "Widely compatible"],
      button: "Download PDF",
      extension: ".pdf",
    },
  ];

  const handleDownload = async (format) => {
    setDownloading((prev) => ({ ...prev, [format]: true }));
    setMessage("");
    try {
      let contentToExport = "";
      if (processedPapers && processedPapers.length > 0) {
        contentToExport = processedPapers
          .map((paper) => `# ${paper.filename}\n\n${paper.formatted_content}`)
          .join("\n\n---\n\n");
      } else {
        contentToExport = `
# Research Paper Generated by PaperPilot

## Abstract
This paper was generated using PaperPilot's AI-powered research paper generation system. The content has been processed and formatted according to academic standards.

## Note
No processed papers were found. Please upload and process your research papers first to generate content from your actual research.

## Generated Content
This is a placeholder paper generated by PaperPilot. To get your actual research content, please:
1. Upload your base and reference papers
2. Process them through the system
3. Return to this page to download your formatted research paper

## System Information
- Generated by: PaperPilot AI
- Date: ${new Date().toLocaleDateString()}
- Format: ${format}
        `;
      }

      const formatMap = {
        LaTeX: "tex",
        "Microsoft Word": "docx",
        PDF: "pdf",
      };

      const fileFormat = formatMap[format];
      const filename =
        processedPapers.length > 0
          ? `research_paper_${new Date().toISOString().split("T")[0]}`
          : `sample_paper_${new Date().toISOString().split("T")[0]}`;

      await apiService.exportPaper(contentToExport, fileFormat, filename);
      setMessage(`${format} file downloaded successfully!`);
      setMessageType("success");
    } catch (error) {
      console.error("Download error:", error);
      setMessage(`Failed to download ${format}: ${error.message}`);
      setMessageType("error");
    } finally {
      setDownloading((prev) => ({ ...prev, [format]: false }));
    }
  };

  return (
    <div className="min-h-screen flex flex-col bg-gray-50 font-sans">
      {/* Header */}
      <Header />

      {/* Main */}
      <main className="flex-1 py-10 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          {/* Title */}
          <div className="mb-10 text-center">
            <h2 className="text-4xl font-extrabold text-gray-900 tracking-tight">
              Export Your Research Paper
            </h2>
            <p className="mt-2 text-lg text-gray-500">
              Download your publication-ready paper in your preferred format
            </p>
          </div>

          {/* Main Content Card */}
          <div className="bg-white rounded-2xl shadow-lg p-8 border border-gray-100">
            {/* Template Information */}
            {templateInfo && (
              <div className="mb-8 p-6 rounded-xl bg-gradient-to-r from-[#002C79]/10 to-[#175ACD]/10 border border-[#002C79]/20">
                <div className="flex items-center gap-3 mb-3">
                  <FileText className="w-6 h-6 text-[#002C79]" />
                  <span className="text-lg font-semibold text-gray-900">
                    Template: {templateInfo.template_name}
                  </span>
                </div>
                <p className="text-sm text-gray-600">
                  {templateInfo.available
                    ? `Using ${templateInfo.template_name} for consistent formatting across all papers.`
                    : "Template not available. Using default formatting."}
                </p>
              </div>
            )}

            {/* Status Display */}
            <div
              className={`mb-8 p-6 rounded-xl border ${
                processedPapers && processedPapers.length > 0
                  ? "bg-green-50 border-green-200"
                  : "bg-yellow-50 border-yellow-200"
              }`}
            >
              {processedPapers && processedPapers.length > 0 ? (
                <div>
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <CheckCircle className="w-6 h-6 text-green-600" />
                      <span className="text-lg font-semibold text-gray-900">
                        {processedPapers.length} processed paper{processedPapers.length > 1 ? "s" : ""} ready for export
                      </span>
                    </div>
                    <button
                      onClick={() => setShowQualityReport(true)}
                      className="px-4 py-2 text-sm font-semibold bg-gradient-to-r from-[#002C79] to-[#175ACD] text-white rounded-lg hover:shadow-md transition-all"
                    >
                      View Quality Report
                    </button>
                  </div>
                  {processedPapers[0]?.quality_report && (
                    <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mt-4">
                      <div className="flex items-center gap-3 text-sm">
                        <TrendingUp className="w-5 h-5 text-gray-600" />
                        <span>Quality:</span>
                        <span
                          className={`font-semibold ${
                            processedPapers[0].quality_report.overall_score >= 80
                              ? "text-green-600"
                              : processedPapers[0].quality_report.overall_score >= 60
                              ? "text-yellow-600"
                              : "text-red-600"
                          }`}
                        >
                          {processedPapers[0].quality_report.overall_score || 0}/100
                        </span>
                      </div>
                      <div className="flex items-center gap-3 text-sm">
                        <Shield className="w-5 h-5 text-gray-600" />
                        <span>Originality:</span>
                        <span
                          className={`font-semibold ${
                            processedPapers[0].plagiarism_report?.originality_score >= 85
                              ? "text-green-600"
                              : processedPapers[0].plagiarism_report?.originality_score >= 70
                              ? "text-yellow-600"
                              : "text-red-600"
                          }`}
                        >
                          {processedPapers[0].plagiarism_report?.originality_score || 0}%
                        </span>
                      </div>
                      <div className="flex items-center gap-3 text-sm">
                        <FileText className="w-5 h-5 text-gray-600" />
                        <span>Template:</span>
                        <span
                          className={`font-semibold ${
                            processedPapers[0].template_compliance?.score >= 80
                              ? "text-green-600"
                              : processedPapers[0].template_compliance?.score >= 60
                              ? "text-yellow-600"
                              : "text-red-600"
                          }`}
                        >
                          {processedPapers[0].template_compliance?.score || 0}%
                        </span>
                      </div>
                    </div>
                  )}
                  {processedPapers[0]?.template_compliance?.issues.length > 0 && (
                    <div className="mt-3 text-sm text-gray-600">
                      <span className="font-medium">Issues:</span>{" "}
                      {processedPapers[0].template_compliance.issues.join(", ")}
                    </div>
                  )}
                </div>
              ) : (
                <div className="flex items-center gap-3">
                  <AlertCircle className="w-6 h-6 text-yellow-600" />
                  <span className="text-lg font-semibold text-gray-900">
                    No processed papers found. Please upload and process your research papers first.
                  </span>
                </div>
              )}
            </div>

            {/* Message Display */}
            {message && (
              <div
                className={`mb-8 p-6 rounded-xl border ${
                  messageType === "success"
                    ? "bg-green-50 border-green-200 text-green-800"
                    : "bg-red-50 border-red-200 text-red-800"
                }`}
              >
                <div className="flex items-center gap-3">
                  {messageType === "success" ? (
                    <CheckCircle className="w-5 h-5" />
                  ) : (
                    <AlertCircle className="w-5 h-5" />
                  )}
                  <span>{message}</span>
                </div>
              </div>
            )}

            {/* Format Selector */}
            <div className="flex items-center gap-4 mb-8">
              <label className="text-sm font-semibold text-gray-900">Select Format:</label>
              <select className="border border-gray-200 rounded-lg px-4 py-2 text-sm focus:ring-2 focus:ring-[#002C79] focus:border-transparent">
                <option>All Formats</option>
                <option>LaTeX</option>
                <option>Microsoft Word</option>
                <option>PDF</option>
              </select>
            </div>

            {/* Cards */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {formats.map((format, idx) => (
                <div
                  key={idx}
                  className="bg-white rounded-xl shadow-md p-6 flex flex-col gap-4 hover:shadow-lg transition-all duration-300 border border-gray-100"
                >
                  <div className="flex justify-center">
                    <FileText className="w-12 h-12 text-[#002C79] p-3 bg-gradient-to-r from-[#002C79]/10 to-[#175ACD]/10 rounded-full" />
                  </div>
                  <h3 className="text-center text-xl font-bold text-gray-900">{format.title}</h3>
                  <p className="text-center text-sm text-gray-500">{format.subtitle}</p>
                  <p className="text-xs bg-gray-100 text-gray-700 py-1 px-3 rounded-full w-fit mx-auto">
                    {format.extension}
                  </p>
                  <ul className="text-sm text-gray-700 flex flex-col gap-2 mt-2">
                    {format.features.map((feat, i) => (
                      <li key={i} className="flex items-center gap-3">
                        <CheckCircle className="w-5 h-5 text-green-500" />
                        {feat}
                      </li>
                    ))}
                  </ul>
                  <button
                    onClick={() => handleDownload(format.title)}
                    disabled={downloading[format.title]}
                    className="flex items-center justify-center gap-2 bg-gradient-to-r from-[#002C79] to-[#175ACD] text-white rounded-lg px-4 py-2 mt-auto font-semibold hover:shadow-md transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {downloading[format.title] ? (
                      <Loader2 className="w-4 h-4 animate-spin" />
                    ) : (
                      <Download className="w-4 h-4" />
                    )}
                    {downloading[format.title] ? "Downloading..." : format.button}
                  </button>
                </div>
              ))}
            </div>

            {/* Submission Metadata */}
            <div className="flex justify-center mt-10">
              <button className="px-6 py-3 bg-gradient-to-r from-[#002C79] to-[#175ACD] text-white font-semibold rounded-lg shadow-md hover:shadow-lg transition-all text-lg">
                Submission Metadata
              </button>
            </div>
          </div>
        </div>
      </main>

      {/* Quality Report Modal */}
      {showQualityReport && processedPapers && processedPapers.length > 0 && (
        <QualityReport
          paperData={processedPapers[0]}
          onClose={() => setShowQualityReport(false)}
        />
      )}
    </div>
  );
};

export default ExportPaper;